print('Hello, R')
a = 10
a
a.shape
claer
clear
clear()
clr()
cls()
clearPushBack()
setwd("/media/nahid/data-center1/workspace/code-snippets/R")
c
x <- 5
if (x >= 0) {
print("x is positive")
}
print("End of the program")
x <- -5
if (x >= 0) {
print("x is positive")
}
print("End of the program")
x <- -5
if (x >= 0) {
print("x is positive")
} else {
print("number is negative")
}
print("End of the program")
x <- 0
if (x >= 0) {
print("x is positive")
} else if (x == 0) {
print("x is zero")
} else {
print("number is negative")
}
print("End of the program")
x <- 0
if (x > 0) {
print("x is positive")
} else if (x == 0) {
print("x is zero")
} else {
print("number is negative")
}
print("End of the program")
x <- 10
# ifelse(condition, 'true', 'false')
ifelse(x >= 0, 'Number is Positive', 'Number is Negative')
x <- 10
# ifelse(condition, 'true', 'false')
# check number is positive or negative
ifelse(x >= 0, 'Number is Positive', 'Number is Negative')
# check odd and even number
ifelse(x%%2==0, 'Number is even', 'Number is odd')
# for loop # 1
for (i in 1:5) {
print(i)
}
x = 1:3
for (i in x) {
print(i)
}
x = letters
for (i in x) {
print(i)
}
# for loop # 1
for (i in 1:5) {
print(i)
}
x = 1:3
for (i in x) {
print(i)
}
x = letters
for (i in x) {
print(i)
}
# graps first five character
y = x[1:5]
for (i in y) {
print(i)
}
x <- 1 # initialization
# while(condition) {
# write your code here
#}
while (x <= 5) {
print(x)
x <- x + 1
}
print("End of the loop")
i <- 1
# print 1 ... 5
repeat {
print(i)
if (i > 5) {
break
}
i <- i + 1
}
for i in 1:10:
print(i)
for (i in 1 : 10) {
if (i %% 2 == 0) {
next
}
print(i)
}
mysum = function(x, y) {
z <- x + y
return(z)
}
ret = mysum(3,5)
print(ret)
mysum = function(x, y) {
z <- x + y
return(z)
}
ret = mysum(3,5)
print(ret)
ret = mysum(y=10, x=10)
print(ret)
mysum = function(x, y) {
z <- x + y
return(z)
}
ret = mysum(3,5)
print(ret)
ret = mysum(y=10, x=10)
print(ret)
mysum = function(x, y=2) {
z <- x + y
return(z)
}
ret = mysum(3)
print(ret)
# function return multiple value
myeval = function(x, y) {
add = x + y
mul = x * y
result = list('sum'=add, 'mul'=mul)
return(result)
}
print(myeval(10,2))
# inline function
mysum = function(x, y) x + y
myexp = function(x, y) x ^ y
print(mysum(10, 20))
print(myexp(2,3))
# typeof(..) return atomic types of the variable
x <- 10
typeof(x) # integer
x <- 10.5
typeof(x) # double
x <- T
typeof(x) # logical
x <- 'Mahin'
typeof(x) # character
?c
x <- c(10,20,20)
x
typeof(x)
# using assign
assign('y', c(20, 23, 2))
typeof(y)
# using assign
assign('y', c(20, 23.4, 2))
typeof(y)
# using assign
assign('y', c(20, 23.4, 2))
typeof(y)
# typeof(..) return atomic types of the variable
x <- 10
typeof(x) # integer
x <- 10.5
typeof(x) # double
x <- T
typeof(x) # logical
x <- 'Mahin'
typeof(x) # character
# create a vector in R
# using c(....)
x <- c(10,20,20)
x
typeof(x)
# using assign
assign('y', c(20, 23.4, 2))
typeof(y)
assign('t', c('a', 10, 39, 2.4))
typeof(t)
# using sequence of number
y <- 1:6
typeof(y)
y
z <- seq(1, 6)
z
typeof(z)
w = c(y, z)
w
# using sequence of number
y <- 1:6
typeof(y)
y
z <- seq(3, 6)
z
typeof(z)
w = c(y, z)
w
### multiple assign
x <- y <- z <- c(seq(1,6))
x
y
z
x <- vector('numeric', length = 4)
x
x <- vector('numeric', length = 4)
x
x <- vector('logical', length = 4)
x
x <- vector('character', length = 4)
x
x <- vector('double', length = 4)
x
## length()
length(x)
